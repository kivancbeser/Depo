/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ann;

import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;

/**
 *
 * @author kivancenes
 */
public class Ann extends javax.swing.JFrame {

    static double LR;
    static int HIDDENLAYER = 9;
    static int EPOCH;

    /**
     * Creates new form NewJFrame
     */
    public Ann() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("part-1 forestfire prediction");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jTextArea2.setEnabled(false);
        jScrollPane1.setViewportView(jTextArea2);

        jButton2.setText("part-2 credit");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setEnabled(false);
        jScrollPane2.setViewportView(jTextArea1);

        jLabel1.setText("Learning Rate(0-1)");

        jLabel2.setText("Learning Rate(0-1)");

        jLabel3.setText("epoch:");

        jLabel4.setText("epoch:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 94, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addGap(45, 45, 45))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(20, 20, 20)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(429, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3)
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(98, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(13, 13, 13)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        /*
         -değerleri min max normalize ederek listelere koy
         -initial weight olcaksa bias ata kafandan
         -2 hidden node u koy 
         -    
         */
        try {
            LR = Double.parseDouble(jTextField1.getText().toString());
            EPOCH = Integer.parseInt(jTextField3.getText().toString());
            FileInputStream fstream = new FileInputStream("src\\ann\\part1-forestfires.txt");
            DataInputStream in = new DataInputStream(fstream);
            BufferedReader br = new BufferedReader(new InputStreamReader(in));
            List<List> list = new ArrayList<List>();
            String strLine;
            strLine = br.readLine();//ilk satırı burda okutuyorum.
            while ((strLine = br.readLine()) != null) {
                String[] lines = strLine.split(",");
                List<String> wordList = Arrays.asList(lines);
                list.add(wordList);
            }
            in.close();
            //normalize et.
            double[] minmyList = new double[9];
            double[] maxmyList = new double[9];
            for (int k = 0; k < 9; k++) { //9 tane kolon her kolonun paralel olarak minini maxını arıyor
                minmyList[k] = Double.parseDouble(list.get(0).get(k + 1).toString());
                maxmyList[k] = Double.parseDouble(list.get(0).get(k + 1).toString());
            }
            for (int i = 1; i < 10; i++) {
                for (int j = 0; j < list.size(); j++) {
                    if (Double.parseDouble(list.get(j).get(i).toString()) < minmyList[i - 1]) {
                        minmyList[i - 1] = Double.parseDouble(list.get(j).get(i).toString());
                    }
                    if (Double.parseDouble(list.get(j).get(i).toString()) > maxmyList[i - 1]) {
                        maxmyList[i - 1] = Double.parseDouble(list.get(j).get(i).toString());
                    }
                }
            }
            List<List> dlist = new ArrayList<List>();//normalize edilmişleri tutcaz                      
            for (int i = 0; i < list.size(); i++) {
                List<Double> dwordList = new ArrayList<Double>();
                dlist.add(dwordList);
                if (list.get(i).get(0).toString().equals("sun")) {
                    dwordList.add(1.0);
                    dwordList.add(0.0);
                    dwordList.add(0.0);
                    dwordList.add(0.0);
                    dwordList.add(0.0);
                    dwordList.add(0.0);
                    dwordList.add(0.0);
                } else if (list.get(i).get(0).toString().equals("mon")) {
                    dwordList.add(0.0);
                    dwordList.add(1.0);
                    dwordList.add(0.0);
                    dwordList.add(0.0);
                    dwordList.add(0.0);
                    dwordList.add(0.0);
                    dwordList.add(0.0);
                } else if (list.get(i).get(0).toString().equals("tue")) {
                    dwordList.add(0.0);
                    dwordList.add(0.0);
                    dwordList.add(1.0);
                    dwordList.add(0.0);
                    dwordList.add(0.0);
                    dwordList.add(0.0);
                    dwordList.add(0.0);
                } else if (list.get(i).get(0).toString().equals("wed")) {
                    dwordList.add(0.0);
                    dwordList.add(0.0);
                    dwordList.add(0.0);
                    dwordList.add(1.0);
                    dwordList.add(0.0);
                    dwordList.add(0.0);
                    dwordList.add(0.0);

                } else if (list.get(i).get(0).toString().equals("thu")) {
                    dwordList.add(0.0);
                    dwordList.add(0.0);
                    dwordList.add(0.0);
                    dwordList.add(0.0);
                    dwordList.add(1.0);
                    dwordList.add(0.0);
                    dwordList.add(0.0);

                } else if (list.get(i).get(0).toString().equals("fri")) {
                    dwordList.add(0.0);
                    dwordList.add(0.0);
                    dwordList.add(0.0);
                    dwordList.add(0.0);
                    dwordList.add(0.0);
                    dwordList.add(1.0);
                    dwordList.add(0.0);

                } else if (list.get(i).get(0).toString().equals("sat")) {
                    dwordList.add(0.0);
                    dwordList.add(0.0);
                    dwordList.add(0.0);
                    dwordList.add(0.0);
                    dwordList.add(0.0);
                    dwordList.add(0.0);
                    dwordList.add(1.0);

                }
            }
            //min-max
            for (int i = 0; i < list.size(); i++) {
                for (int j = 1; j < list.get(i).size(); j++) {
                    dlist.get(i).add((Double.parseDouble(list.get(i).get(j).toString()) - minmyList[j - 1]) / (maxmyList[j - 1] - minmyList[j - 1]));
                }
            }
            //weight initialize
            double[][] weight_inputhidden = new double[dlist.get(0).size() - 1][HIDDENLAYER];//15-9
            double[] weight_hiddenoutput = new double[HIDDENLAYER];//hiddenla output arası
            //-1,+1 arası weight initialize
            Random rand = new Random();
            for (int i = 0; i < ((dlist.get(0).size()) - 1); i++) {
                for (int j = 0; j < HIDDENLAYER; j++) {
                    weight_inputhidden[i][j] = (rand.nextDouble() * 2) - 1;
                }
            }
            for (int i = 0; i < HIDDENLAYER; i++) {
                weight_hiddenoutput[i] = (rand.nextDouble() * 2) - 1;
            }

            double[][][] fiveFoldTrainData = new double[((dlist.size()) / 5) * 4][dlist.get(0).size()][5];
            double[][][] fiveFoldTestData = new double[(dlist.size()) / 5][dlist.get(0).size()][5];

            //ilk for 5 fold
            //ikinci for 440 kadar dönücek
            for (int i = 0; i < 5; i++) {
                for (int j = 0; j < dlist.size(); j++) {
                    if ((i * (dlist.size() / 5)) <= j && (i + 1) * (dlist.size() / 5) > j) {//teste at
                        for (int k = 0; k < dlist.get(0).size(); k++) {
                            fiveFoldTestData[j%((dlist.size()) / 5)][k][i] = Double.parseDouble(dlist.get(j).get(k).toString());
                        }
                    } else {//train e at
                        for (int k = 0; k < dlist.get(0).size(); k++) {
                            if (j >= (dlist.size()) / 5 * 4) {
                                fiveFoldTrainData[j - dlist.size() / 5][k][i] = Double.parseDouble(dlist.get(j).get(k).toString());
                            } else {
                                fiveFoldTrainData[j][k][i] = Double.parseDouble(dlist.get(j).get(k).toString());
                            }
                        }
                    }
                }
            }

            Double RMSE[] = new Double[5]; //root min square error arrayi
            Double AveRMSE = 0.0; // average root min square error
            for (int f = 0; f < 5; f++) {//fivefold
                for (int e = 0; e < EPOCH; e++) {
                    double[] predictions = new double[(dlist.size()) / 5 * 4];//352 geri kalan 88 test
                    double[] hiddeninput = new double[HIDDENLAYER];
                    double[] hiddenoutput = new double[HIDDENLAYER];

                    for (int b = 0; b < (dlist.size()) / 5 * 4; b++) {//352
                        hiddeninput = new double[HIDDENLAYER];
                        for (int i = 0; i < HIDDENLAYER; i++) {//9
                            for (int j = 0; j < ((dlist.get(0).size()) - 1); j++) {//15
                                hiddeninput[i] += fiveFoldTrainData[b][j][f] * weight_inputhidden[j][i];
                            }
                            hiddenoutput[i] = 1 / (1 + Math.pow(Math.E, -hiddeninput[i]));
                        }
                        double output = 0.0;
                        for (int i = 0; i < HIDDENLAYER; i++) {
                            output += hiddenoutput[i] * weight_hiddenoutput[i];
                        }
                        //outputu sigmoide sokma
                        output = 1 / (1 + Math.pow(Math.E, -output));
                        predictions[b] = output;
                    }
                    //random selected error correction.
                    Random rnd = new Random();
                    int random = rnd.nextInt((dlist.size()) / 5 * 4); // 352
                    Double errOutput = predictions[random] * (1 - predictions[random]) * ((Double.parseDouble(dlist.get(random).get(9).toString()) - 1) - predictions[random]);
                    double[] old_weight_hiddenoutput = new double[HIDDENLAYER];
                    for (int i = 0; i < HIDDENLAYER; i++) {
                        old_weight_hiddenoutput[i] = weight_hiddenoutput[i];
                        weight_hiddenoutput[i] += LR * errOutput * hiddenoutput[i];
                    }

                    for (int i = 0; i < dlist.get(0).size() - 1; i++) {
                        for (int j = 0; j < HIDDENLAYER; j++) {
                            Double errHidden = predictions[random] * (1 - predictions[random]) * errOutput * old_weight_hiddenoutput[j];
                            weight_inputhidden[i][j] += LR * errHidden * fiveFoldTrainData[random][i][f];
                        }
                    }
                }
                //test
                double[] predictions = new double[(dlist.size()) / 5];//352
                double[] hiddeninput = new double[HIDDENLAYER];
                double[] hiddenoutput = new double[HIDDENLAYER];
                for (int b = 0; b < (dlist.size()) / 5; b++) {//feedforward
                    hiddeninput = new double[HIDDENLAYER];
                    for (int i = 0; i < HIDDENLAYER; i++) {//9
                        for (int j = 0; j < ((dlist.get(0).size()) - 1); j++) {//15
                            hiddeninput[i] += fiveFoldTestData[b][j][f] * weight_inputhidden[j][i];
                        }
                        hiddenoutput[i] = 1 / (1 + Math.pow(Math.E, -hiddeninput[i]));
                    }
                    double output = 0.0;
                    for (int i = 0; i < HIDDENLAYER; i++) {
                        output += hiddenoutput[i] * weight_hiddenoutput[i];
                    }
                    //outputu sigmoide sokma
                    output = 1 / (1 + Math.pow(Math.E, -output));
                    predictions[b] = output;
                }
                //error
                Double mse = 0.0;
                for (int i = 0; i < (dlist.size()) / 5; i++) {
                    mse += Math.pow((fiveFoldTestData[i][((dlist.get(0).size()) - 1)][f] - predictions[i]), 2);
                }
                mse = mse / ((dlist.size()) / 5);
                RMSE[f] = Math.sqrt(mse);
                AveRMSE += RMSE[f];
                System.out.println(RMSE[f]);
            }
            AveRMSE=AveRMSE/5;
            AveRMSE=AveRMSE * (maxmyList[8] - minmyList[8]) + minmyList[8];//de normalizasyon
            System.out.println(AveRMSE);

            jTextArea1.setText("AveRmse:" + AveRMSE + "\n");

        } catch (IOException | NumberFormatException e) {//Catch exception if any
            jTextArea1.setText("Error: " + e.getMessage());
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        try {
            FileInputStream fstream = new FileInputStream("src\\ann\\part2-credit.txt");
            DataInputStream in = new DataInputStream(fstream);
            BufferedReader br = new BufferedReader(new InputStreamReader(in));
            List<List> list = new ArrayList<List>();
            String strLine;
            strLine = br.readLine();//ilk satırı burda okutuyorum.
            while ((strLine = br.readLine()) != null) {
                String[] lines = strLine.split(",");
                List<String> wordList = Arrays.asList(lines);
                list.add(wordList);
            }
            in.close();
        } catch (IOException | NumberFormatException e) {//Catch exception if any
            jTextArea1.setText("Error: " + e.getMessage());
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ann.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ann.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ann.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ann.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ann().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    // End of variables declaration//GEN-END:variables
}
